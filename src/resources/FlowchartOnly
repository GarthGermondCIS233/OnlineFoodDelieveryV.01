
```mermaid 
classDiagram
    %% Menu Package
    class MenuItem {
        <<abstract>>
        private Long id
        private String name
        private String description
        private double price
        private String category
        private boolean available
        public double calculateTotal()
        public void updatePrice(double newPrice)
        public boolean isAvailable()
        public String getDetails()
    }
    
    %% Order Package
    class OrderBuilder {
        private Long customerId
        private List~MenuItem~ items
        private Location deliveryLocation
        private String customerEmail
        public OrderBuilder withValidatedCustomerId(Long customerId)
        public OrderBuilder withCustomerEmail(String email)
        public OrderBuilder addItem(MenuItem item)
        public OrderBuilder withItems(List~MenuItem~ items)
        public OrderBuilder withDeliveryLocation(Location location)
        private void validateOrderRequirements()
        public Order build()
    }

    class Order {
        private Long orderId
        private Long customerId
        private Long driverId
        private List~MenuItem~ items
        private OrderStatus status
        private double totalAmount
        private LocalDateTime orderTime
        private Payment payment
        private Location deliveryLocation
        public double calculateTotal()
        public void updateStatus(OrderStatus newStatus)
        public void processPayment(String paymentMethod)
        public Location getDeliveryLocation()
        public String getCustomerEmail()
        public void setEstimatedDeliveryTime(LocalDateTime time)
    }

    %% Observer Package
    class OrderSubject {
        <<interface>>
        public void attach(OrderObserver observer)
        public void detach(OrderObserver observer)
        public void notifyObservers(Order order)
    }

    class CustomerNotifier {
        private NotificationService notificationService
        public CustomerNotifier(NotificationService notificationService)
        public void update(Order order)
    }
    %% Menu Package
    class MenuItem {
        <<abstract>>
        private Long id
        private String name
        private String description
        private double price
        private String category
        private boolean available
        public double calculateTotal()
        public void updatePrice(double newPrice)
        public boolean isAvailable()
        public String getDetails()
    }
    
    class Hamburger {
        private double basePrice
        public double calculateTotal()
    }
    
    class Drink {
        private Size size
        public double calculateTotal()
    }
    
    class Size {
        <<enumeration>>
        SMALL
        MEDIUM
        LARGE
        private double priceMultiplier
    }

    %% Order Package
    class OrderBuilder {
        private Long customerId
        private List~MenuItem~ items
        private Location deliveryLocation
        private String customerEmail
        public OrderBuilder withValidatedCustomerId(Long customerId)
        public OrderBuilder withCustomerEmail(String email)
        public OrderBuilder addItem(MenuItem item)
        public OrderBuilder withItems(List~MenuItem~ items)
        public OrderBuilder withDeliveryLocation(Location location)
        private void validateOrderRequirements()
        public Order build()
    }

    class Order {
        private Long orderId
        private Long customerId
        private Long driverId
        private List~MenuItem~ items
        private OrderStatus status
        private double totalAmount
        private LocalDateTime orderTime
        private Payment payment
        private Location deliveryLocation
        public double calculateTotal()
        public void updateStatus(OrderStatus newStatus)
        public void processPayment(String paymentMethod)
        public Location getDeliveryLocation()
        public String getCustomerEmail()
        public void setEstimatedDeliveryTime(LocalDateTime time)
    }

    class OrderStatus {
        <<enumeration>>
        PLACED
        ACCEPTED
        IN_DELIVERY
        DELIVERED
    }

    %% Observer Package
    class OrderSubject {
        <<interface>>
        public void attach(OrderObserver observer)
        public void detach(OrderObserver observer)
        public void notifyObservers(Order order)
    }

    class OrderObserver {
        <<interface>>
        public void update(Order order)
    }

    class OrderTrackingService {
        private List~OrderObserver~ observers
        public void attach(OrderObserver observer)
        public void detach(OrderObserver observer)
        public void notifyObservers(Order order)
    }

    class CustomerNotifier {
        private NotificationService notificationService
        public CustomerNotifier(NotificationService notificationService)
        public void update(Order order)
    }

    %% User Package
    class Customer {
        private Long id
        private String name
        private String address
        private String phone
        private String email
        private List~Order~ orderHistory
        public Order placeOrder(List~MenuItem~ items)
        public void rateDriver(Driver driver, int score, String comment)
        public List~Order~ getOrderHistory()
        public Long getId()
        public String getName()
    }

    class Driver {
        private Long id
        private String name
        private String vehicle
        private String licenseNumber
        private Location currentLocation
        private RatingsHandler ratings
        private Order currentOrder
        private boolean isAvailable
        public void acceptOrder(Order order)
        public void completeDelivery(Order order)
        public void setCurrentOrder(Order order)
        public Optional~Order~ getCurrentOrder()
    }

    %% Factory Package
    class MenuItemFactory {
        private static long nextId
        public MenuItem createMenuItem(String type, String name, String description, double basePrice)
        public MenuItem createCustomMenuItem(String type, String name, String description, double basePrice, Size size)
    }

    %% Main Package
    class DeliverySystem {
        private OrderQueue orderQueue
        private Map~Long, Driver~ availableDrivers
        private Map~Long, Driver~ busyDrivers
        private OrderTracker orderTracker
        private DriverMatchingStrategy driverMatcher
        private NotificationService notificationService
        public DeliverySystem(DriverMatchingStrategy matcher, NotificationService notifier)
        public void registerDriver(Driver driver)
        public void completeDelivery(Long orderId, Long driverId)
        private void validateAndProcessOrder(Order order)
        private void notifyOrderSubmission(Order order)
        private void assignDriverIfAvailable(Order order)
    }

    class Rating {
        private Long id
        private Long customerId
        private Long driverId
        private int score
        private String comment
        private LocalDateTime timestamp
        public Rating(Long customerId, Long driverId, int score, String comment)
        public boolean validate()
        public String getRatingDetails()
        public Long getId()
        public Long getCustomerId()
        public Long getDriverId()
        public int getScore()
        public String getComment()
        public LocalDateTime getTimestamp()
    }

    class RatingsHandler~T~ {
        private int maxRatings
        private Deque~T~ ratingsQueue
        public RatingsHandler(int maxRatings)
        public void addRating(T rating)
        public Optional~T~ removeOldestRating()
        public Optional~T~ getLatestRating()
        private void enforceRatingQueueMaxSize()
        public void clearAllRatings()
        public boolean isRatingQueueEmpty()
        public boolean isRatingQueueFull()
        public int getCurrentRatingCount()
        public double calculateAverageRating()
        public int getMaxRatings()
    }

    class RatingsBusinessLogic~T~ {
        <<interface>>
        public void addRating(T rating)
        public Optional~T~ removeOldestRating()
        public Optional~T~ getLatestRating()
        public void clearAllRatings()
        public boolean isRatingQueueEmpty()
        public boolean isRatingQueueFull()
        public int getCurrentRatingCount()
        public void enforceRatingQueueMaxSize()
        public double calculateAverageRating()
        public int getMaxRatings()
    }

    class Payment {
        private Long paymentId
        private Long orderId
        private String paymentMethod
        private double amount
        private LocalDateTime paymentTime
        private boolean isProcessed
        private boolean isRefunded
        public Payment(Long orderId, String paymentMethod, double amount)
        public boolean processPayment()
        public boolean refundPayment()
        public Long getPaymentId()
        public Long getOrderId()
        public String getPaymentMethod()
        public double getAmount()
        public LocalDateTime getPaymentTime()
        public boolean isProcessed()
        public boolean isRefunded()
    }

    class OrderQueue {
        private Queue~Order~ orders
        private int maxQueueSize
        private OrderValidator validator
        public OrderQueue(int maxQueueSize)
        public void enqueue(Order order)
        public Optional~Order~ dequeue()
        public Optional~Order~ peek()
        public boolean isEmpty()
        public int size()
        public void clear()
        public List~Order~ getPendingOrders()
    }

    class OrderValidator {
        <<interface>>
        public boolean validate(Order order)
    }

    %% Relationships
    MenuItem <|-- Fries
    MenuItem <|-- Hamburger
    MenuItem <|-- Drink
    OrderSubject <|.. OrderTrackingService
    OrderObserver <|.. CustomerNotifier
    MenuItemFactory ..> MenuItem : creates
    Order o-- MenuItem : contains
    Customer "1" --> "*" Order : places
    Order "*" --> "*" MenuItem : contains
    Driver "1" --> "*" Order : accepts
    Customer "1" --> "*" Rating : gives
    Driver "1" --> "*" Rating : receives
    Order --> OrderStatus : has
    Order "1" --> "1" Payment : includes
    DeliverySystem --> OrderQueue : uses
    OrderQueue --> Order : manages
    OrderQueue --> OrderValidator : uses
    OrderBuilder ..> Order : creates
    OrderBuilder --> MenuItem : uses
    OrderBuilder --> Location : uses
    Order -- OrderBuilder : builds
    RatingsBusinessLogic <|.. RatingsHandler : implements
    RatingsHandler --> Rating : manages
```